<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2014, The CyanogenMod Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds.  Do not translate. -->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">

    <!-- Flag indicating whether we should enable the automatic brightness in Settings.
                  config_hardware_automatic_brightness_available is not set, so we will use software implementation -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
                  The N entries of this array define N + 1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1:    array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>15</item>
        <item>100</item>
        <item>3000</item>
        <item>8000</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
                  in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>24</item>
        <item>48</item>
        <item>108</item>
        <item>206</item>
        <item>246</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about a long screen/key press -->
    <integer-array name="config_longPressVibePattern">
        <item>0</item>
        <item>20</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>0</item>
        <item>15</item>
    </integer-array>

    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>0</item>
        <item>13</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
    <integer-array name="config_safeModeDisabledVibePattern">
        <item>0</item>
        <item>15</item>
    </integer-array>
    <integer-array name="config_safeModeEnabledVibePattern">
        <item>0</item>
        <item>15</item>
        <item>200</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
    <integer-array name="config_scrollBarrierVibePattern">
        <item>0</item>
        <item>13</item>
        <item>17</item>
        <item>13</item>
    </integer-array>

    <!-- Vibrator pattern to be used as the default for notifications
         that specify DEFAULT_VIBRATE.
     -->
    <integer-array name="config_defaultNotificationVibePattern">
        <item>0</item>
        <item>230</item>
        <item>170</item>
        <item>230</item>
    </integer-array>

    <!-- Vibrator pattern to be used as the default for notifications
         that do not specify vibration but vibrate anyway because the device
         is in vibrate mode.
     -->
    <integer-array name="config_notificationFallbackVibePattern">
        <item>0</item>
        <item>75</item>
        <item>130</item>
        <item>75</item>
    </integer-array>

    <!-- Vibrator pattern to be used as for notifications while alerts
         are disabled (e.g. during phone calls) if enabled by the user.
    
    <integer-array name="config_notificationNoAlertsVibePattern">
        <item>0</item>
        <item>30</item>
        <item>75</item>
        <item>30</item>
    </integer-array> -->

    <!-- If the DUN connection for this CDMA device supports more than just DUN -->
    <!-- traffic you should list them here. -->
    <!-- If this device is not CDMA this is ignored.  If this list is empty on -->
    <!-- a DUN-requireing CDMA device, the DUN APN will support -->
    <!-- just DUN. -->
    <string-array translatable="false" name="config_cdma_dun_supported_types">
        <item>"default"</item>
        <item>"dun"</item>
        <item>"mms"</item>
        <item>"supl"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
                  USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"rndis\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
                  Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan\\d"</item>
        <item>"softap.*"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
                  bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
        <item>"bt-pan"</item>
    </string-array>

    <!-- Array of ConnectivityManager.TYPE_xxxx values allowable for tethering -->
    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
             <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
    <integer-array translatable="false" name="config_tether_upstream_types">
        <item>0</item>
        <item>1</item>
        <item>4</item>
        <item>5</item>
        <item>7</item>
    </integer-array>

    <!-- Boolean indicating whether the wifi chipset has background scan support -->
    <bool translatable="false" name="config_wifi_background_scan_support">false</bool>

    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>

    <!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>

    <!-- If this is true, the screen will fade off. -->
    <bool name="config_animateScreenLights">false</bool>

    <!-- Indicate whether closing the lid causes the device to go to sleep and opening
         it causes the device to wake up.
         The default is false. -->
    <bool name="config_lidControlsSleep">true</bool>

    <!-- Device supports LED flashlight
    <bool name="config_enableTorch">true</bool> -->

    <!-- Boolean indicating whether Softap requires reloading AP firmware
    <bool name="config_wifiApFirmwareReload">false</bool> -->

    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
        on the headphone/microphone jack. When false use the older uevent framework. -->
    <bool name="config_useDevInputEventForAudioJack">true</bool>

    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. -->
    <bool name="config_showNavigationBar">true</bool>

    <!-- Hardware 'face' keys present on the device, stored as a bit field.
        This integer should equal the sum of the corresponding value for each
        of the following keys present:
            1 - Home
            2 - Back
            4 - Menu
            8 - Assistant (search)
            16 - App switch
            32 - Camera
        For example, a device with Home, Back and Menu keys would set this
        config to 7. -->
    <integer name="config_deviceHardwareKeys">0</integer>

    <!-- Performance profiles
    <string name="config_perf_profile_prop">sys.perf.profile</string>
    <string name="config_perf_profile_default_entry">1</string> -->

    <!-- Component name of the geofence services provider. -->
    <string name="config_geofenceServicesProvider" translatable="false">com.motorola.motgeofencesvc</string>

    <!-- Is the device capable of hot swapping an UICC Card -->
    <bool name="config_hotswapCapable">true</bool>

    <!-- Default interface to monitor data use -->
    <string name="config_datause_iface">rmnet0</string>

    <!-- Whether to enable auto provisioning the app for new SIM card on boot.
    <bool name="config_auto_provision_enable">true</bool>-->

    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true-->
    <bool name="skip_restoring_network_selection">true</bool>

    <!-- Screen brightness when dozing -->
    <integer name="config_screenBrightnessDoze">17</integer>

    <!-- Dream of notifications -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>
    <bool name="config_powerDecoupleAutoSuspendModeFromDisplay">true</bool>
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>

</resources>
